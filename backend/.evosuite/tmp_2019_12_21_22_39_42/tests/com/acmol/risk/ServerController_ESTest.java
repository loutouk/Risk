/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 21 21:52:26 GMT 2019
 */

package com.acmol.risk;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.acmol.risk.Message;
import com.acmol.risk.ServerController;
import com.acmol.risk.StringMessage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ServerController_ESTest extends ServerController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ServerController serverController0 = new ServerController();
      StringMessage stringMessage0 = serverController0.onConnection("playerId field is null and should not be", "");
      assertNotNull(stringMessage0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ServerController serverController0 = new ServerController();
      serverController0.onConnection("error", "error");
      Message message0 = serverController0.skipfortify("error");
      assertNotNull(message0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ServerController serverController0 = new ServerController();
      serverController0.onConnection("error", "error");
      Message message0 = serverController0.skipattack("error");
      assertNotNull(message0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ServerController serverController0 = new ServerController();
      serverController0.onConnection("error", "error");
      Message message0 = serverController0.putreinforce("ok", "ok");
      assertNotNull(message0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ServerController serverController0 = new ServerController();
      serverController0.onConnection("error", "error");
      Message message0 = serverController0.fortify("dx4yi8=4^(JF!%YT", "error");
      assertNotNull(message0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ServerController serverController0 = new ServerController();
      serverController0.onConnection("error", "error");
      Message message0 = serverController0.attack("ok", "error");
      assertNotNull(message0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ServerController serverController0 = new ServerController();
      serverController0.gameController = null;
      // Undeclared exception!
      try { 
        serverController0.onConnection(" connected but ", " connected but ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.acmol.risk.ServerController", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ServerController serverController0 = new ServerController();
      serverController0.gameController = null;
      // Undeclared exception!
      try { 
        serverController0.onActualizePlayers("com.acmol.risk.Message");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.acmol.risk.ServerController", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ServerController serverController0 = new ServerController();
      serverController0.gameController = null;
      try { 
        serverController0.launch("fI0&s8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.acmol.risk.ServerController", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ServerController serverController0 = new ServerController();
      try { 
        serverController0.skipfortify("error");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.acmol.risk.GameController", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ServerController serverController0 = new ServerController();
      Message message0 = serverController0.launch("dx4yi8=4^(JF!%YT");
      assertNotNull(message0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ServerController serverController0 = new ServerController();
      try { 
        serverController0.attack("ok", "error");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.acmol.risk.GameController", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ServerController serverController0 = new ServerController();
      try { 
        serverController0.putreinforce("ok", "ok");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.acmol.risk.GameController", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ServerController serverController0 = new ServerController();
      try { 
        serverController0.skipattack("error");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.acmol.risk.GameController", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ServerController serverController0 = new ServerController();
      serverController0.onConnection("error", "error");
      try { 
        serverController0.putreinforce("error", "#o[:rd-*1>uFH");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"rd-*1>uFH\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ServerController serverController0 = new ServerController();
      StringMessage stringMessage0 = serverController0.onActualizePlayers("error");
      assertNotNull(stringMessage0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ServerController serverController0 = new ServerController();
      try { 
        serverController0.fortify("", "3R+m+Zi5USC6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.acmol.risk.GameController", e);
      }
  }
}
