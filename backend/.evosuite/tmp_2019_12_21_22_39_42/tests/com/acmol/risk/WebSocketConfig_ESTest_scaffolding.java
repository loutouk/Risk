/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Sat Dec 21 21:50:39 GMT 2019
 */

package com.acmol.risk;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class WebSocketConfig_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "com.acmol.risk.WebSocketConfig"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "Cp1252"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "C:\\Users\\loutouk\\AppData\\Local\\Temp\\"); 
    java.lang.System.setProperty("user.country", "GB"); 
    java.lang.System.setProperty("user.dir", "C:\\Users\\loutouk\\Documents\\Computing\\Master\\Analyse Conception\\Jeu RISK\\projet-2019\\backend"); 
    java.lang.System.setProperty("user.home", "C:\\Users\\loutouk"); 
    java.lang.System.setProperty("user.language", "en"); 
    java.lang.System.setProperty("user.name", "loutouk"); 
    java.lang.System.setProperty("user.timezone", "Europe/Paris"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(WebSocketConfig_ESTest_scaffolding.class.getClassLoader() ,
      "org.springframework.messaging.simp.config.MessageBrokerRegistry",
      "org.springframework.web.socket.config.annotation.WebSocketTransportRegistration",
      "org.springframework.messaging.SubscribableChannel",
      "org.springframework.beans.factory.Aware",
      "org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler",
      "org.springframework.web.socket.messaging.SubProtocolErrorHandler",
      "org.springframework.context.Phased",
      "com.acmol.risk.WebSocketConfig",
      "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler",
      "org.springframework.messaging.simp.config.AbstractBrokerRegistration",
      "org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler",
      "org.springframework.messaging.simp.config.ChannelRegistration",
      "org.springframework.lang.Nullable",
      "org.springframework.context.ApplicationEventPublisherAware",
      "org.springframework.web.socket.config.annotation.WebMvcStompEndpointRegistry",
      "org.springframework.util.PathMatcher",
      "org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer",
      "org.springframework.context.annotation.Import",
      "org.springframework.messaging.MessageChannel",
      "org.springframework.web.socket.config.annotation.StompWebSocketEndpointRegistration",
      "org.springframework.messaging.simp.config.StompBrokerRelayRegistration",
      "org.springframework.context.Lifecycle",
      "org.springframework.context.SmartLifecycle",
      "org.springframework.web.socket.config.annotation.StompEndpointRegistry",
      "org.springframework.context.annotation.Configuration",
      "org.springframework.stereotype.Component",
      "org.springframework.messaging.MessageHandler",
      "org.springframework.messaging.simp.config.SimpleBrokerRegistration",
      "org.springframework.web.socket.messaging.StompSubProtocolErrorHandler",
      "org.springframework.web.util.UrlPathHelper",
      "org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("org.springframework.messaging.simp.config.MessageBrokerRegistry", false, WebSocketConfig_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.springframework.web.socket.config.annotation.StompEndpointRegistry", false, WebSocketConfig_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(WebSocketConfig_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "com.acmol.risk.WebSocketConfig",
      "org.springframework.messaging.simp.config.MessageBrokerRegistry"
    );
  }
}
