/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 21 22:53:43 GMT 2019
 */

package com.acmol.risk;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.acmol.risk.Continent;
import com.acmol.risk.Player;
import com.acmol.risk.RandomInitializer;
import com.acmol.risk.Territory;
import java.util.ArrayList;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RandomInitializer_ESTest extends RandomInitializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RandomInitializer randomInitializer0 = new RandomInitializer();
      ArrayList<Continent> arrayList0 = new ArrayList<Continent>();
      Continent continent0 = new Continent(",W%t");
      arrayList0.add(continent0);
      randomInitializer0.initArmy(arrayList0, (Player[]) null);
      Player[] playerArray0 = new Player[5];
      Player player0 = new Player("", "4Z\"RC}");
      playerArray0[0] = player0;
      Territory territory0 = new Territory("4Z\"RC}");
      Player player1 = territory0.owner;
      playerArray0[1] = null;
      Player player2 = territory0.owner;
      playerArray0[2] = null;
      Player player3 = new Player("4Z\"RC}", "h_-3;Dx~");
      playerArray0[3] = player3;
      Player player4 = new Player("Tp@-bKN2U", (String) null);
      playerArray0[4] = player4;
      // Undeclared exception!
      randomInitializer0.initArmy(arrayList0, playerArray0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RandomInitializer randomInitializer0 = new RandomInitializer();
      ArrayList<Continent> arrayList0 = new ArrayList<Continent>();
      Player[] playerArray0 = new Player[6];
      Player player0 = new Player("a$'8", "a$'8");
      playerArray0[0] = player0;
      Player player1 = new Player("SxPUZN?o|pP#3gBR", "a$'8");
      playerArray0[1] = player1;
      Player player2 = new Player("", "");
      playerArray0[2] = player2;
      Player player3 = new Player("", "PlI3?D/: l");
      playerArray0[3] = player3;
      Player player4 = new Player("", "");
      playerArray0[4] = player4;
      Player player5 = new Player("a$'8", "rN]46X:tsr9%6%,g");
      playerArray0[5] = player5;
      // Undeclared exception!
      randomInitializer0.initArmy(arrayList0, playerArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RandomInitializer randomInitializer0 = new RandomInitializer();
      ArrayList<Continent> arrayList0 = new ArrayList<Continent>(1);
      Continent continent0 = new Continent("");
      arrayList0.add(continent0);
      Continent[] continentArray0 = new Continent[9];
      continentArray0[0] = continent0;
      continent0.id = "";
      continentArray0[1] = continent0;
      continentArray0[2] = continent0;
      Continent continent1 = new Continent("");
      continentArray0[3] = continent0;
      continentArray0[4] = continent0;
      arrayList0.add(continent0);
      continentArray0[5] = continent0;
      continentArray0[6] = continent0;
      Continent continent2 = new Continent("");
      continent2.findTerritoryById("$i{_o(P)3 /");
      continentArray0[7] = continent2;
      continentArray0[8] = continent0;
      arrayList0.toArray(continentArray0);
      randomInitializer0.initArmy(arrayList0, (Player[]) null);
      randomInitializer0.initArmy(arrayList0, (Player[]) null);
      randomInitializer0.initArmy(arrayList0, (Player[]) null);
      randomInitializer0.initArmy(arrayList0, (Player[]) null);
      randomInitializer0.initArmy(arrayList0, (Player[]) null);
      randomInitializer0.initArmy(arrayList0, (Player[]) null);
      randomInitializer0.initArmy(arrayList0, (Player[]) null);
      randomInitializer0.initArmy((ArrayList<Continent>) null, (Player[]) null);
      randomInitializer0.initArmy(arrayList0, (Player[]) null);
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RandomInitializer randomInitializer0 = new RandomInitializer();
      ArrayList<Continent> arrayList0 = new ArrayList<Continent>();
      Player[] playerArray0 = new Player[8];
      Player player0 = new Player((String) null, (String) null);
      playerArray0[0] = player0;
      Player player1 = new Player((String) null, (String) null);
      playerArray0[1] = player1;
      Player player2 = new Player((String) null, "The number of player is ");
      playerArray0[2] = player2;
      Territory territory0 = new Territory("}~uc");
      Player player3 = territory0.owner;
      playerArray0[3] = null;
      Player player4 = new Player("i4_<", "The number of player is ");
      playerArray0[4] = player4;
      Player player5 = new Player("pk*~<Lj)h`%P Ez", "pk*~<Lj)h`%P Ez");
      playerArray0[5] = player5;
      Player player6 = new Player("pk*~<Lj)h`%P Ez", "com.acmol.risk.Continent");
      playerArray0[6] = player6;
      Player player7 = territory0.owner;
      playerArray0[7] = null;
      try { 
        randomInitializer0.initArmy(arrayList0, playerArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The number of player is 8 but it should be between 3 and 6
         //
         verifyException("com.acmol.risk.RandomInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RandomInitializer randomInitializer0 = new RandomInitializer();
      LinkedList<Continent> linkedList0 = new LinkedList<Continent>();
      ArrayList<Continent> arrayList0 = new ArrayList<Continent>(linkedList0);
      Player[] playerArray0 = new Player[1];
      Player player0 = new Player("%=e-|*T>ak4_", "8Za,ggV>}q`{k");
      playerArray0[0] = player0;
      try { 
        randomInitializer0.initArmy(arrayList0, playerArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The number of player is 1 but it should be between 3 and 6
         //
         verifyException("com.acmol.risk.RandomInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RandomInitializer randomInitializer0 = new RandomInitializer();
      ArrayList<Continent> arrayList0 = new ArrayList<Continent>();
      Player[] playerArray0 = new Player[6];
      Territory territory0 = new Territory("");
      Player player0 = territory0.owner;
      playerArray0[0] = null;
      Player player1 = territory0.owner;
      playerArray0[1] = null;
      Player[] playerArray1 = new Player[3];
      playerArray1[0] = null;
      playerArray1[1] = null;
      playerArray1[2] = null;
      // Undeclared exception!
      randomInitializer0.initArmy(arrayList0, playerArray1);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RandomInitializer randomInitializer0 = new RandomInitializer();
      ArrayList<Continent> arrayList0 = new ArrayList<Continent>(1);
      Continent continent0 = new Continent("");
      arrayList0.add(continent0);
      Continent[] continentArray0 = new Continent[9];
      continentArray0[0] = continent0;
      continent0.id = "";
      continentArray0[1] = continent0;
      continentArray0[2] = continent0;
      Continent continent1 = new Continent("");
      arrayList0.add(continent1);
      continentArray0[3] = continent0;
      continentArray0[4] = continent0;
      arrayList0.add(continent0);
      continentArray0[5] = continent0;
      continentArray0[6] = continent0;
      Continent continent2 = new Continent("");
      continent2.findTerritoryById("$i{_o(P)3 /");
      continentArray0[7] = continent2;
      continentArray0[8] = continent0;
      arrayList0.toArray(continentArray0);
      randomInitializer0.initArmy(arrayList0, (Player[]) null);
      randomInitializer0.initArmy(arrayList0, (Player[]) null);
      randomInitializer0.initArmy(arrayList0, (Player[]) null);
      randomInitializer0.initArmy(arrayList0, (Player[]) null);
      randomInitializer0.initArmy(arrayList0, (Player[]) null);
      randomInitializer0.initArmy(arrayList0, (Player[]) null);
      randomInitializer0.initArmy(arrayList0, (Player[]) null);
      randomInitializer0.initArmy(arrayList0, (Player[]) null);
      randomInitializer0.initArmy(arrayList0, (Player[]) null);
      assertTrue(arrayList0.contains(continent0));
  }
}
